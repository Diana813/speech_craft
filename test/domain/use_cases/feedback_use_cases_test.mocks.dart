// Mocks generated by Mockito 5.4.4 from annotations
// in speech_craft/test/domain/use_cases/feedback_use_cases_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:typed_data' as _i6;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:speech_craft/data/models/success_rate_response/user_success_rate.dart'
    as _i8;
import 'package:speech_craft/data/models/upload_audio_request/time_range.dart'
    as _i7;
import 'package:speech_craft/domain/failures/failures.dart' as _i5;
import 'package:speech_craft/domain/repositories/feedback_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FeedbackRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFeedbackRepository extends _i1.Mock
    implements _i3.FeedbackRepository {
  @override
  _i4.Future<_i2.Either<int, _i5.Failure>> uploadUserAudio({
    required _i6.Uint8List? bytes,
    required _i7.TimeRange? timeRange,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadUserAudio,
          [],
          {
            #bytes: bytes,
            #timeRange: timeRange,
          },
        ),
        returnValue: _i4.Future<_i2.Either<int, _i5.Failure>>.value(
            _FakeEither_0<int, _i5.Failure>(
          this,
          Invocation.method(
            #uploadUserAudio,
            [],
            {
              #bytes: bytes,
              #timeRange: timeRange,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<int, _i5.Failure>>.value(
                _FakeEither_0<int, _i5.Failure>(
          this,
          Invocation.method(
            #uploadUserAudio,
            [],
            {
              #bytes: bytes,
              #timeRange: timeRange,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<int, _i5.Failure>>);

  @override
  _i4.Future<_i2.Either<_i8.UserSuccessRate, _i5.Failure>>
      getUserSuccessRate() => (super.noSuchMethod(
            Invocation.method(
              #getUserSuccessRate,
              [],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i8.UserSuccessRate, _i5.Failure>>.value(
                    _FakeEither_0<_i8.UserSuccessRate, _i5.Failure>(
              this,
              Invocation.method(
                #getUserSuccessRate,
                [],
              ),
            )),
            returnValueForMissingStub:
                _i4.Future<_i2.Either<_i8.UserSuccessRate, _i5.Failure>>.value(
                    _FakeEither_0<_i8.UserSuccessRate, _i5.Failure>(
              this,
              Invocation.method(
                #getUserSuccessRate,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i8.UserSuccessRate, _i5.Failure>>);
}
